
.. _program_listing_file__home_runner_work_spdl_spdl_src_libspdl_core_encoder.h:

Program Listing for File encoder.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_spdl_spdl_src_libspdl_core_encoder.h>` (``/home/runner/work/spdl/spdl/src/libspdl/core/encoder.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (c) Meta Platforms, Inc. and affiliates.
    * All rights reserved.
    *
    * This source code is licensed under the BSD-style license found in the
    * LICENSE file in the root directory of this source tree.
    */
   
   #pragma once
   
   #include <libspdl/core/frames.h>
   #include <libspdl/core/packets.h>
   #include <libspdl/core/types.h>
   
   #include <memory>
   #include <string>
   
   namespace spdl::core {
   
   namespace detail {
   template <MediaType media>
   class EncoderImpl;
   }
   
   template <MediaType media>
   class Encoder {
     detail::EncoderImpl<media>* pImpl;
   
    public:
     explicit Encoder(detail::EncoderImpl<media>*);
     Encoder(const Encoder<media>&) = delete;
     Encoder& operator=(const Encoder<media>&) = delete;
     Encoder(Encoder<media>&&) = delete;
     Encoder& operator=(Encoder<media>&&) = delete;
   
     ~Encoder();
   
     PacketsPtr<media> encode(const FramesPtr<media>&&);
   
     PacketsPtr<media> flush();
   };
   
   template <MediaType media>
   using EncoderPtr = std::unique_ptr<Encoder<media>>;
   
   using VideoEncoder = Encoder<MediaType::Video>;
   using VideoEncoderPtr = EncoderPtr<MediaType::Video>;
   
   using AudioEncoder = Encoder<MediaType::Audio>;
   using AudioEncoderPtr = EncoderPtr<MediaType::Audio>;
   
   } // namespace spdl::core
