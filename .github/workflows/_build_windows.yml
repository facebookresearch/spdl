name: " - Wheel (Windows)"

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      free-threaded:
        description: 'Whether FT Python or not. Valid value is "ft" or not.'
        default: ''
        type: string
      use-nvdec:
        default: "nvdec"
        type: string
        description: 'Whether build NVDEC extension. Valid value is "nvdec" or not.'
      run-test:
        required: false
        default: 'false'
        type: string
      os:
        default: "windows-latest"
        type: string

env:
  ARTIFACT: wheel-win-py${{ inputs.python-version }}${{ inputs.free-threaded }}
  SPDL_USE_TRACING: 0
  SPDL_USE_CUDA: 1
  SPDL_USE_NVDEC: "${{ inputs.use-nvdec == 'nvdec' }}"

jobs:
  build:
    runs-on: "${{ inputs.os }}"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Cuda Toolkit 12.4 on Windows
        shell: bash
        run: |
          choco install unzip -y --no-progress

          .github/scripts/windows/install_cuda_toolkit_12.4.sh

          echo "C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v12.4\\\\bin" >> $GITHUB_PATH
          echo "CUDA_PATH=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.4" >> $GITHUB_ENV

      - name: Build
        run: |
          .\packaging\vc_env_helper.bat                 `
            bash                                        `
              .github/scripts/windows/build_package.sh  `
              "${{ inputs.python-version }}"            `
              "${{ inputs.free-threaded }}"

      - uses: actions/upload-artifact@v4
        name: Upload build artifact
        with:
          name: "${{ env.ARTIFACT }}"
          path: package
          if-no-files-found: error
          retention-days: 7
          overwrite: true

      - name: Check package
        run: |
          .\packaging\vc_env_helper.bat                `
            bash                                       `
              .github/scripts/windows/check_package.sh

  unit-test:
    if: "${{ inputs.run-test == 'true' }}"
    name: "test ffmpeg"
    needs: ["build"]
    strategy:
      fail-fast: false
      matrix:
        ffmpeg-version: ["8.0"]
    runs-on:  "${{ inputs.os }}"
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          name: "${{ env.ARTIFACT }}"
          path: package

      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ inputs.python-version }}
          conda-remove-defaults: "true"

      - name: Unit test
        run: |
          if [[ "${{ inputs.free-threaded }}" == 'ft' ]]; then
            conda install -q -c conda-forge python-freethreading
          fi

          # Install SPDL
          pip install $(find package -name '*.whl' -depth -maxdepth 1)

          # Install PyTorch and others
          if [[ "${{ inputs.free-threaded }}" == 'ft' ]]; then
            pip install torch numpy pytest
          else
            pip install torch numpy numba pytest
          fi

          # Install FFmpeg
          conda install -q -c conda-forge "ffmpeg==${{ matrix.ffmpeg-version }}"

          pytest -v \
              tests/spdl_unittest/io/ \
              tests/spdl_unittest/dataloader/
