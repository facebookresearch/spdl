name: " - Wheel (Linux)"

on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      arch:
        required: true
        type: string
      os:
        required: true
        type: string
      run-test:
        required: false
        default: 'false'
        type: string
      test-concurrency:
        required: false
        default: '3'
        type: string

env:
  ARTIFACT: wheel-linux-py${{ inputs.python-version }}-${{ inputs.arch }}

jobs:
  build:
    runs-on: ${{ inputs.os }}
    container: "quay.io/pypa/manylinux_2_28_${{ inputs.arch }}"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Build
        env:
          SPDL_USE_TRACING: 1
        run: |
          set -ex
          uv python list --only-installed

          py_ver="$(echo '${{ inputs.python-version }}' | sed 's|[^0-9]*||g')"
          python_exe="/opt/python/cp${py_ver}-cp${py_ver}/bin/python"
          uv venv --python "${python_exe}"
          uv build --no-python-downloads --all-packages --wheel

          ./packaging/repair_wheels.sh manylinux_2_28_${{ inputs.arch }} ./dist ~/package

      - uses: actions/upload-artifact@v4
        name: Upload build artifact
        with:
          name: "${{ env.ARTIFACT }}"
          path: ~/package
          if-no-files-found: error
          retention-days: 7
          overwrite: true

      - name: Check package
        run: |
          py_ver="$(echo '${{ inputs.python-version }}' | sed 's|[^0-9]*||g')"
          python_exe="/opt/python/cp${py_ver}-cp${py_ver}/bin/python"
          "${python_exe}" -m pip install -r ./packaging/requirements.txt
          "${python_exe}" -m twine check --strict ~/package/*.whl

  check-package-dependency:
    if: "${{ inputs.run-test == 'true' }}"
    needs: ["build"]
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '${{ inputs.python-version }}'
      - uses: actions/download-artifact@v4
        with:
          name: "${{ env.ARTIFACT }}"
          path: ~/package
      - uses: actions/checkout@v4
      - name: Dependency Check
        run: |
          # Install NumPy (the only dep) of SPDL manually, so that
          # if a dependency is introduced accidentally, check_deps will catch
          pip install numpy
          pip install --no-dependencies $(find "${HOME}/package" -name '*.whl' -depth -maxdepth 1)
          python .github/scripts/check_deps.py

  unit-test:
    if: "${{ inputs.run-test == 'true' }}"
    needs: ["build"]
    name: "test (ffmpeg ${{ matrix.ffmpeg-version }})"
    strategy:
      fail-fast: false
      matrix:
        ffmpeg-version: ["4.4.2", "5.1", "6.1", "7.1", "8.0"]
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/download-artifact@v4
        with:
          name: "${{ env.ARTIFACT }}"
          path: ~/package

      - uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ inputs.python-version }}
          channels: conda-forge
          conda-remove-defaults: "true"

      - name: Setup
        run: |
          set -ex

          # Install SPDL
          pip install $(find "${HOME}/package" -name '*.whl' -depth -maxdepth 1)

          # Install PyTorch and others
          pip install numpy torch --index-url https://download.pytorch.org/whl/cpu
          conda install -q numba pytest pytest-xdist parameterized

          # Install FFmpeg
          # Note: Somehow FFmepg 5.1 does not install libiconv so specifying it here
          conda install -q "ffmpeg==${{ matrix.ffmpeg-version }}" libiconv
          # For some reason, the dynamic libraries are not found.
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CONDA_PREFIX}/lib" >> $GITHUB_ENV

      - name: Unit test
        run: |
          set -ex

          python -c 'import spdl.io.utils;assert not spdl.io.utils.built_with_cuda()'
          pytest -v -n ${{ inputs.test-concurrency }} \
              tests/spdl_unittest/io/ \
              tests/spdl_unittest/dataloader/
