.. raw:: html

   <script src='https://cdn.plot.ly/plotly-2.34.0.min.js'></script>
    <script>
    function plot(div_id, data, title, ylabel, emphasis) {
       const t = data['event_time'].map(v => { return new Date(v*1000); });
       var plot_data = [];
        const palette = ['#009fb7', '#fed766', '#fe4a49'];
       for (const key of Object.keys(data).sort()) {
           if (key !== 'event_time') {
               let color = emphasis
                   ? (emphasis.includes(key) ? null : 'rgba(108, 122, 137, 0.2)')
                   : (palette[Math.floor(parseInt(key) / 8)]);
               plot_data.push({
                   x: t.slice(1),
                   y: data[key].slice(1),
                   name: key,
                   line: {
                       width: (emphasis.includes(key) ? 3 : 2),
                       color: color,
                   },
               });
           }
       }
       Plotly.newPlot(
           div_id, {
               data: plot_data,
               layout: {
                   yaxis: {
                       range: [0, null],
                       showticklabels: false,
                       gridwidth: 3,
                   },
                   xaxis: {
                       tickformat: '%H:%M',
                       showticklabels: false,
                       gridwidth: 3,
                   },
                   showlegend: false,
                   paper_bgcolor: 'rgba(0,0,0,0)',
                   plot_bgcolor: 'rgba(0,0,0,0)',
               },
           },
       ).then(
           gd => Plotly.toImage(gd, {
               format: 'svg',
               height: 410,
               width: 680,
           })
       ).then(url => {
           if (div_id === 'across_ranks_preprocess') {
               console.log(url);
               var a = document.createElement('a');
               a.href = url;
               a.download = 'my_plot.svg';
               document.body.appendChild(a);
               a.click();
               document.body.removeChild(a);
           }
       });
    };

    document.addEventListener(
        'DOMContentLoaded',
        function() {
            const cfgs = [
                {
                    data_url: '../_static/data/across_ranks_data_readiness.json',
                    div_id: 'across_ranks_sink',
                    title: 'Data readiness across ranks (Sink)',
                    ylabel: 'Data Readiness',
                    emphasis: ['00', '19'],
                },
                {
                    data_url: '../_static/data/across_ranks_decompress.json',
                    div_id: 'across_ranks_decompress',
                    title: 'Data readiness across ranks (Decompress)',
                    ylabel: 'Data Readiness',
                    emphasis: ['00', '19'],
                },
                {
                    data_url: '../_static/data/across_ranks_compose.json',
                    div_id: 'across_ranks_preprocess',
                    title: 'Queue occupancy of preprocess stage across ranks',
                    ylabel: 'Queue Occupancy',
                    emphasis: ['00', '19'],
                },
                {
                    data_url: '../_static/data/across_ranks_download.json',
                    div_id: 'across_ranks_download',
                    title: 'Average download time across ranks',
                    ylabel: 'Time [sec]',
                },
                {
                    data_url: '../_static/data/across_ranks_compose_ave_time.json',
                    div_id: 'across_ranks_preprocess_ave_time',
                    title: 'Average preprocess time across ranks',
                    ylabel: 'Time [sec]',
                    emphasis: ['00', '19'],
                },
            ]
            cfgs.map(cfg => {
                fetch(cfg.data_url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch the data.');
                        }
                        return response.json();
                    })
                    .then(data => {
                        try {
                            plot(cfg.div_id, data, cfg.title, cfg.ylabel, cfg.emphasis);
                        } catch(error) {
                            const div = document.getElementById(cfg.div_id);
                            div.textContent = "Failed to plot: " + error.toString();
                            throw error;
                        }
                    })
                    .catch(error => {console.error(error);});
            })
        },
        false);
   </script>
