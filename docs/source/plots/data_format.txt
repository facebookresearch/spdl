.. raw:: html

   <script src='https://cdn.plot.ly/plotly-2.34.0.min.js'></script>
   <script>
    const data =  {
        "NPY - SPDL": {
            "MT": {
                "mean": [1755, 1710, 1672, 1656, 1661, 1656],
                "ci": [31, 24, 18, 21, 25, 28]},
            "MP": {
                "mean": [374, 499, 589, 529, 460, 369],
                "ci": [6, 6, 7, 5, 3, 3]}},
        "NPZ - SPDL": {
            "MT": {
                "mean": [1644, 1642, 1572, 1531, 1483, 1504],
                "ci": [26, 25, 19, 27, 22, 25]},
            "MP": {
                "mean": [358, 488, 584, 527, 460, 368],
                "ci": [6, 4, 8, 5, 4, 2]}},
        "NPZ (compressed) - SPDL": {
            "MT": {
                "mean": [1317, 1396, 1320, 1265, 1262, 1245],
                "ci": [14, 26, 21, 16, 33, 17]},
            "MP": {
                "mean": [333, 467, 579, 521, 461, 371],
                "ci": [5, 7, 8, 4, 3, 3]}},
        "NPY": {
            "MT": {
                "mean": [1053, 979, 926, 882, 866, 853],
                "ci": [20, 11, 8, 8, 7, 11]},
            "MP": {
                "mean": [313, 455, 585, 530, 459, 367],
                "ci": [4, 8, 9, 4, 4, 2]}},
        "NPZ": {
            "MT": {
                "mean": [709, 626, 592, 563, 548, 541],
                "ci": [7, 8, 4, 4, 3, 3]},
            "MP": {
                "mean": [270, 421, 575, 525, 460, 368],
                "ci": [3, 5, 8, 4, 2, 2]}},
        "NPZ (compressed)": {
            "MT": {
                "mean": [522, 460, 405, 387, 362, 349],
                "ci": [8, 8, 6, 5, 3, 5]},
            "MP": {
                "mean": [230, 377, 582, 529, 460, 368],
                "ci": [2, 5, 7, 5, 3, 2]}},
        "Torch": {
            "MT": {
                "mean": [996, 981, 881, 868, 846, 828],
                "ci": [12, 11, 7, 7, 7, 8]},
            "MP": {
                "mean": [252, 445, 602, 550, 473, 364],
                "ci": [2, 6, 7, 6, 5, 3]}},
    };
   const colors = {
       "Torch": "F05627",
       "NPY": "F8D5B8",
       "NPZ": "C65D52",
       "NPZ (compressed)": "F1C700",
       "NPY - SPDL": "9CCF65",
       "NPZ - SPDL": "81E4BD",
       "NPZ (compressed) - SPDL": "6E81BE",
   };
   const symbols = {
       "Torch": "circle",
       "NPY": "diamond",
       "NPZ": "x",
       "NPZ (compressed)": "triangle-up",
       "NPY - SPDL": "triangle-left",
       "NPZ - SPDL": "triangle-right",
       "NPZ (compressed) - SPDL": "square",
   };
   function plot(div_id, keys) {
       let plot_data = [];
       const x = [1, 2, 4, 8, 16, 32];
       keys.map(k => {
           ['MP', 'MT'].map(t => {
               plot_data.push({
                   x,
                   y: data[k][t].mean,
                   error_y: {
                       type: 'data',
                       array: data[k][t].ci,
                       visible: true,
                       thickness: 1.5,
                       width: 3,
                   },
                   name: `${k} - ${t}`,
                   line: {
                       color: colors[k],
                       dash: (t === 'MP') ? 'dot' : null,
                   },
                   marker: {
                       color: colors[k],
                       symbol: symbols[k],
                       size: 7,
                   },
               });
           });
       });
       const layout = {
           title: "The speed of loading array data",
           xaxis: {
               title: "The number of workers",
               tickmode: "array",
               tickvals: x,
           },
           yaxis: {
               title: "Throughput [arrays/sec]",
               range: [0, null],
           }
       };
       Plotly.newPlot(div_id, plot_data, layout);
   };
   document.addEventListener(
       'DOMContentLoaded',
       function() {
           const cfgs = [
               {
                   div_id: 'npz_basic',
                   keys: ['NPZ', 'NPZ (compressed)'],
               },
               {
                   div_id: 'npz_2',
                   keys: ['Torch', 'NPY', 'NPZ', 'NPZ (compressed)'],
               },
               {
                   div_id: 'npz_all',
                   keys: Object.keys(data),
               },
           ]
           cfgs.map(c => {
               try {
                   plot(c.div_id, c.keys);
               } catch(error) {
                   console.error("Failed to plot.", error);
                   const div = document.getElementById(c.div_id);
                   div.textContent = "Failed to plot: " + error.toString();
               }
           });
       },
       false);
   function plot_exp(div_id, series) {
       var plot_data = [];
       for (const key of Object.keys(series)) {
           if (key !== 'step') {
               plot_data.push({
                   x: series.step,
                   y: series[key],
                   name: key,
               });
           }
       }
       const layout  = {
           title: "Data format, parallelism and training speed",
           yaxis: {
               title: {
                   text: "Throughput (batch/sec)",
               },
               range: [0, null],
           },
           xaxis: {
               title: "Step",
           },
           showlegend: true,
       };
       Plotly.newPlot(div_id, plot_data, layout);
   };
   document.addEventListener(
       'DOMContentLoaded',
       function() {
           const data_url = '../_static/data/data_format.json';
           const div_id = 'npz_exp';
           fetch(data_url)
               .then(response => {
                   if (!response.ok) {
                       throw new Error('Failed to fetch the data.');
                   }
                   return response.json();
               })
               .then(data => {
                   try {
                       plot_exp(div_id, data);
                   } catch(error) {
                       const div = document.getElementById(div_id);
                       div.textContent = "Failed to plot: " + error.toString();
                       throw error;
                   }
               })
               .catch(error => {console.error(error);});
           
       },
       false);
   </script>
