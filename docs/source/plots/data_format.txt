.. raw:: html

   <script src='https://cdn.plot.ly/plotly-2.34.0.min.js'></script>
   <script>
    const data = {
        "Torch": {
            "MT": {
                "mean": [1008, 982, 892, 873, 859, 831],
                "ci": [6, 6, 5, 5, 4, 4]},
            "MP": {
                "mean": [253, 443, 607, 551, 469, 364],
                "ci": [1, 3, 3, 4, 3, 1]}},
        "NPY": {
            "MT": {
                "mean": [1040, 977, 932, 882, 862, 845],
                "ci": [7, 7, 5, 4, 4, 3]},
            "MP": {
                "mean": [309, 467, 586, 532, 462, 369],
                "ci": [2, 4, 4, 2, 1, 1]}},
        "NPY - SPDL": {
            "MT": {
                "mean": [1791, 1743, 1687, 1671, 1661, 1652],
                "ci": [19, 15, 13, 14, 14, 15]},
            "MP": {
                "mean": [381, 500, 586, 532, 462, 370],
                "ci": [3, 4, 4, 2, 1, 1]}},
        "NPZ": {
            "MT": {
                "mean": [717, 631, 597, 565, 548, 544],
                "ci": [4, 5, 2, 2, 2, 2]},
            "MP": {
                "mean": [271, 423, 584, 530, 464, 370],
                "ci": [1, 3, 3, 2, 1, 1]}},
        "NPZ (compressed)": {
            "MT": {
                "mean": [524, 465, 406, 393, 365, 352],
                "ci": [4, 5, 2, 2, 2, 2]},
            "MP": {
                "mean": [231, 376, 580, 529, 461, 368],
                "ci": [1, 2, 3, 2, 2, 1]}},
        "NPZ - SPDL": {
            "MT": {
                "mean": [1667, 1630, 1558, 1530, 1517, 1501],
                "ci": [17, 11, 11, 15, 13, 13]},
            "MP": {
                "mean": [360, 491, 592, 532, 461, 367],
                "ci": [3, 3, 3, 2, 1, 1]}},
        "NPZ (compressed) - SPDL": {
            "MT": {
                "mean": [1327, 1368, 1319, 1260, 1249, 1241],
                "ci": [11, 14, 10, 8, 7, 8]},
            "MP": {
                "mean": [338, 470, 584, 529, 462, 370],
                "ci": [3, 3, 3, 2, 1, 1]}}};
   const colors = {
       "Torch": "F05627",
       "NPY": "F8D5B8",
       "NPZ": "C65D52",
       "NPZ (compressed)": "F1C700",
       "NPY - SPDL": "9CCF65",
       "NPZ - SPDL": "81E4BD",
       "NPZ (compressed) - SPDL": "6E81BE",
   };
   const symbols = {
       "Torch": "circle",
       "NPY": "diamond",
       "NPZ": "x",
       "NPZ (compressed)": "triangle-up",
       "NPY - SPDL": "triangle-left",
       "NPZ - SPDL": "triangle-right",
       "NPZ (compressed) - SPDL": "square",
   };
   function plot(div_id, keys) {
       let plot_data = [];
       const x = [1, 2, 4, 8, 16, 32];
       keys.map(k => {
           ['MP', 'MT'].map(t => {
               plot_data.push({
                   x,
                   y: data[k][t].mean,
                   error_y: {
                       type: 'data',
                       array: data[k][t].ci,
                       visible: true,
                       thickness: 0.1,
                       width: 0.1,
                   },
                   name: `${k} - ${t}`,
                   line: {
                       color: colors[k],
                       dash: (t === 'MP') ? 'dot' : null,
                   },
                   marker: {
                       color: colors[k],
                       symbol: symbols[k],
                       size: 9,
                   },
               });
           });
       });
       const layout = {
           title: "The speed of loading array data",
           xaxis: {
               title: "The number of workers",
               tickmode: "array",
               tickvals: x,
           },
           yaxis: {
               title: "Throughput [arrays/sec]",
               range: [0, null],
           }
       };
       Plotly.newPlot(div_id, plot_data, layout);
   };
   document.addEventListener(
       'DOMContentLoaded',
       function() {
           const cfgs = [
               {
                   div_id: 'npz_basic',
                   keys: ['NPZ', 'NPZ (compressed)'],
               },
               {
                   div_id: 'npz_2',
                   keys: ['Torch', 'NPY', 'NPZ', 'NPZ (compressed)'],
               },
               {
                   div_id: 'npz_all',
                   keys: Object.keys(data),
               },
           ]
           cfgs.map(c => {
               try {
                   plot(c.div_id, c.keys);
               } catch(error) {
                   console.error("Failed to plot.", error);
                   const div = document.getElementById(c.div_id);
                   div.textContent = "Failed to plot: " + error.toString();
               }
           });
       },
       false);
   function plot_exp(div_id, series) {
       var plot_data = [];
       for (const key of Object.keys(series)) {
           if (key !== 'step') {
               plot_data.push({
                   x: series.step,
                   y: series[key],
                   name: key,
               });
           }
       }
       const layout  = {
           title: "Data format, parallelism and training speed",
           yaxis: {
               title: {
                   text: "Throughput (batch/sec)",
               },
               range: [0, null],
           },
           xaxis: {
               title: "Step",
           },
           showlegend: true,
       };
       Plotly.newPlot(div_id, plot_data, layout);
   };
   document.addEventListener(
       'DOMContentLoaded',
       function() {
           const data_url = '../_static/data/data_format.json';
           const div_id = 'npz_exp';
           fetch(data_url)
               .then(response => {
                   if (!response.ok) {
                       throw new Error('Failed to fetch the data.');
                   }
                   return response.json();
               })
               .then(data => {
                   try {
                       plot_exp(div_id, data);
                   } catch(error) {
                       const div = document.getElementById(div_id);
                       div.textContent = "Failed to plot: " + error.toString();
                       throw error;
                   }
               })
               .catch(error => {console.error(error);});
           
       },
       false);
   </script>
