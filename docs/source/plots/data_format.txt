.. raw:: html

   <script src='https://cdn.plot.ly/plotly-2.34.0.min.js'></script>
   <script>
   const data = {
       Torch: {
           MP: {
               mean: [245, 429, 595, 549, 467, 361],
               ci: [11, 20, 28, 25, 21, 15],
           },
           MT: {
               mean: [979, 967, 879, 871, 843, 815],
               ci: [47, 45, 41, 41, 38, 36],
           }
       },
       NPY: {
           MP: {
               mean: [302, 451, 578, 518, 447, 353],
               ci: [14, 21, 27, 24, 20, 15],
           },
           MT: {
               mean: [1031, 967, 923, 870, 855, 838],
               ci: [49, 45, 43, 40, 39, 37],
           },
       },
       "NPY (with spdl.io)": {
           MP: {
               mean: [367, 492, 587, 526, 447, 355],
               ci: [18, 23, 27, 24, 20, 15],
           },
           MT: {
               mean: [1737, 1736, 1687, 1631, 1655, 1634],
               ci: [81, 83, 81, 78, 80, 76],
           },
       },
       NPZ: {
           MP: {
               mean: [266, 413, 579, 523, 446, 352],
               ci: [12, 19, 27, 24, 20, 15],
           },
           MT: {
               mean: [709, 627, 594, 556, 542, 537],
               ci: [33, 30, 28, 25, 24, 23],
           },
       },
       "NPZ (with spdl.io)": {
           MP: {
               mean: [353, 480, 585, 527, 447, 355],
               ci: [18, 22, 27, 24, 20, 15],
           },
           MT: {
               mean: [1624, 1603, 1549, 1512, 1491, 1484],
               ci: [76, 76, 74, 72, 72, 70],
           },
       },
   };
   const colors = {
       Torch: 'rgb(234, 153, 153)',
       NPY: 'rgb(164, 194, 244)',
       NPZ: '#D79D00',
       "NPY (with spdl.io)": 'rgb(142, 124, 195)',
       "NPZ (with spdl.io)": '#78C753',
   };
   const symbols = {
       Torch: 'diamond',
       NPY: 'x',
       NPZ: null,
       "NPY (with spdl.io)": 'triangle-up',
       "NPZ (with spdl.io)": 'square',
   };
   function plot(div_id, keys) {
       let plot_data = [];
       const x = [1, 2, 4, 8, 16, 32];
       keys.map(k => {
           ['MP', 'MT'].map(t => {
               plot_data.push({
                   x,
                   y: data[k][t].mean,
                   error_y: {
                       type: 'data',
                       array: data[k][t].ci,
                       visible: true,
                   },
                   name: `${k} - ${t}`,
                   line: {
                       color: colors[k],
                       dash: (t === 'MP') ? 'dot' : null,
                   },
                   marker: {
                       color: colors[k],
                       symbol: symbols[k],
                       size: 7,
                   }
               });
           });
       });
       const layout = {
           title: "The speed of loading array data",
           xaxis: {
               title: "The number of workers",
               tickmode: "array",
               tickvals: x,
           },
           yaxis: {
               title: "Throughput [arrays/sec]",
               range: [0, null],
           }
       };
       Plotly.newPlot(div_id, plot_data, layout);
   };
   document.addEventListener(
       'DOMContentLoaded',
       function() {
           const cfgs = [
               {
                   div_id: 'npz_basic',
                   keys: ['NPZ'],
               },
               {
                   div_id: 'npz_2',
                   keys: ['NPZ', 'NPY', 'Torch'],
               },
               {
                   div_id: 'npz_all',
                   keys: ['NPZ', 'NPY', 'Torch', 'NPY (with spdl.io)',  'NPZ (with spdl.io)'],
               },
           ]
           cfgs.map(c => {
               try {
                   plot(c.div_id, c.keys);
               } catch(error) {
                   console.error("Failed to plot.", error);
                   const div = document.getElementById(c.div_id);
                   div.textContent = "Failed to plot: " + error.toString();
               }
           });
       },
       false);
   function plot_exp(div_id, series) {
       var plot_data = [];
       for (const key of Object.keys(series)) {
           if (key !== 'step') {
               plot_data.push({
                   x: series.step,
                   y: series[key],
                   name: key,
               });
           }
       }
       const layout  = {
           title: "Data format, parallelism and training speed",
           yaxis: {
               title: {
                   text: "Throughput (batch/sec)",
               },
               range: [0, null],
           },
           xaxis: {
               title: "Step",
           },
           showlegend: true,
       };
       Plotly.newPlot(div_id, plot_data, layout);
   };
   document.addEventListener(
       'DOMContentLoaded',
       function() {
           const data_url = '../_static/data/data_format.json';
           const div_id = 'npz_exp';
           fetch(data_url)
               .then(response => {
                   if (!response.ok) {
                       throw new Error('Failed to fetch the data.');
                   }
                   return response.json();
               })
               .then(data => {
                   try {
                       plot_exp(div_id, data);
                   } catch(error) {
                       const div = document.getElementById(div_id);
                       div.textContent = "Failed to plot: " + error.toString();
                       throw error;
                   }
               })
               .catch(error => {console.error(error);});
           
       },
       false);
   </script>
