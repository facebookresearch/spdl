"""Plot the frames generated by NVDEC decoder"""
import logging

from pathlib import Path

from spdl import libspdl


def _parse_python_args():
    import argparse

    parser = argparse.ArgumentParser(
        description=__doc__,
    )
    parser.add_argument("--debug", action="store_true")
    parser.add_argument(
        "-i", "--input-video", help="Input video file.", type=Path, required=True
    )
    parser.add_argument(
        "-o", "--output-dir", help="Output directory.", type=Path, required=True
    )
    parser.add_argument("--show", action="store_true")
    parser.add_argument("--gpu", type=int)
    parser.add_argument("others", nargs="*")
    return parser.parse_args()


def decode(input_video, gpu):
    """Test the python wrapper of SPDL"""

    input_video = str(input_video.resolve())
    future = libspdl.decode_video_nvdec(
        src=input_video,
        timestamps=[(1, 1.05), (10, 10.05), (20, 20.05)],
        cuda_device_index=gpu,
    )
    return [libspdl.to_numpy(frames) for frames in future.get()]


def _plot(frames, output_dir, show):
    import matplotlib.pyplot as plt

    i = 0
    for fs in frames:
        for f in fs:
            plt.imshow(f)
            plt.savefig(output_dir / f"{i}.png")
            i += 1

    if show:
        plt.show()


def _main():
    args = _parse_python_args()
    _init(args.debug)

    output_dir = args.output_dir.resolve()
    output_dir.mkdir(parents=True, exist_ok=True)

    frames = decode(
        args.input_video,
        args.gpu,
    )

    _plot(frames, output_dir, args.show)


def _init(debug, demuxer_threads=1, decoder_threads=1):
    logging.basicConfig(level=logging.INFO)
    if debug:
        logging.getLogger("spdl").setLevel(logging.DEBUG)
        libspdl.set_ffmpeg_log_level(40)

    folly_args = [
        f"--spdl_demuxer_executor_threads={demuxer_threads}",
        f"--spdl_decoder_executor_threads={decoder_threads}",
        f"--logging={'DBG' if debug else 'INFO'}",
    ]
    libspdl.init_folly(folly_args)


if __name__ == "__main__":
    _main()
